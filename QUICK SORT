Problem statement
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.



Note :
Make changes in the input array itself.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9


###
CODE
/*
	The function is called with the parameters:
	quickSort(input, 0, size - 1);

*/
#include<bits/stdc++.h>
using namespace std;

int partitionArray(int input[], int start, int end) {
	int pivot=input[start];
	int i=start;
	int j=end;
	while(i<j){
	while(input[i]<=pivot && i<=end-1){
         i++;
	}
	while(input[j]>pivot && j>=start+1){
		j--;
	}
        if (i < j) {
         swap(input[i], input[j]);
        }
    }
	swap(input[start],input[j]);
	return j;
}

void qs(int input[],int start,int end){
        if (start < end) {
        int partition = partitionArray(input, start, end);
        qs(input, start, partition-1);
        qs(input, partition + 1, end);
        }
}
void quickSort(int input[], int start, int end) {
	qs(input,start,end);
}
